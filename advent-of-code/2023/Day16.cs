namespace aoc._2023
{
    internal static class Day16
    {
        private static readonly string TestInput = ".|...\\....\r\n|.-.\\.....\r\n.....|-...\r\n........|.\r\n..........\r\n.........\\\r\n..../.\\\\..\r\n.-.-/..|..\r\n.|....-|.\\\r\n..//.|....";
        private static readonly string Input = "\\.............\\................\\....\\..../....\\/...............................\\...-..........-.\\.-....../....\r\n|\\......../|....\\..............-\\............./...........................-..........-......\\........\\........\r\n.......||......../....-./.../-...|.|..-......-.|....../................\\............|...................-..|..\r\n........./......-.............-\\......................|.\\./.......|........./......-......../..-.........|....\r\n....../....................-............................................../...../...|.........................\r\n....................\\....|/............................./.......-....|......../..........................\\....\r\n.|....../|.........-......|.............\\..|..................|......../.................|.|............-.|...\r\n.....-............\\\\............\\................/......-.........\\................\\..|../....................\r\n............|..|.......|......../................\\.......................|../....../......./.....|............\r\n.\\...........\\..\\.............../.........-/....|......................./.....-./-.........../-........-......\r\n|................\\.\\-.............../..-............./........./.................\\.............|...-.....-....\r\n.........-....|..|......................................\\.||...-../..|............../...../.../.........-.....\r\n.....-....-\\.................|...........|../.....\\...............................|...../../|.................\r\n.\\......\\......................\\....../.../.....-.../.........................../..|...........|..\\...........\r\n-............|.........-.-........-.........................|...\\...-...........\\.|...-....../..........|.....\r\n.........-.......|......\\.....\\..-...../..../.....\\.../............/..........-......./....../...........\\.../\r\n..............\\........................|.............................-../......-..-...../..................\\..\r\n.....\\......-.......-.......-......../../../........\\.......-..........|......./........................../...\r\n.\\...\\...................|./\\|.-..\\...............................\\..\\.....-....|......................./.....\r\n.................-...|....|.../...../.|.||.....-.|............................-..............\\................\r\n........................................../.......................|........\\......../.../..............|.....\\\r\n.......\\......./............................./........../../..........................-\\..................|...\r\n...........-...|..\\..........-.........\\.................././................|./.......|............../.......\r\n......./..................................\\...-.........\\........\\....../............................\\......\\-\r\n-.|..-|...............|..........................\\..........|.-.........\\............-.|.............\\.....|..\r\n.............................../..............-.....-.......-........................|.......-................\r\n.........\\.........-.........|...../......../......./....-...\\...................\\........\\...................\r\n..........\\.........\\........../...|.................|./...\\.......\\..........-...............................\r\n./...................|........../\\......../....................|..-...........\\...\\...........|..............|\r\n.....|...........\\-.\\.......-..........................-....-...................|....|.|...............-......\r\n.|.././......................|.......|.......|..............\\...../.................../.\\...-.................\r\n...........-........./....|.................|..-.....-............./...................................-..../.\r\n...................\\/..|.....-............../-......-..........|........................./...\\....-|....|-....\r\n........................./..-..|.\\-...............-......-/...../.......\\..|................-...\\.|.....\\.....\r\n\\...../.........................../....................-..........|........../..-..-.......\\........../.././|.\r\n........................../...\\|..................................................../...|.-........-.....|..\\.\r\n....\\.............................|./.....|...../....\\.............\\...../.......-...............\\..-..../....\r\n.........-.........................|................|........\\/.\\-...................\\..-......./../..........\r\n...-.../............/.................-..........\\....../............../...../..........|.....................\r\n..........\\...\\..................|...-......\\\\......./...-.............-\\.................|...../......\\......\r\n/..\\/.............\\....\\.............\\.......................................|.....\\....-............\\........\r\n....../..\\.|................................\\.........../.......-.......-/.....|...................-.....-....\r\n........-....|.............................|....../...............\\.......................--..................\r\n................/......|.........-....................-..............|.......................................|\r\n.........\\........|...........................\\.............|.............................../.................\r\n...|..\\....-......../.\\...-............................................................/....-...../...........\r\n.............\\\\\\.../...../.../..........\\..............\\...........\\........................|....../.........\\\r\n......-..............|..-..|....-\\..\\..-...-............\\.................\\...-.\\/.....\\......-.\\....--.../...\r\n........./...................../...../..|...\\.\\/.........\\.../........................................\\.../-..\r\n........\\.......|.......|\\..|........../..../\\........../........\\..../..............././..../.............-.\\\r\n........................|-............|............................./.-.|...|............../....-\\............\r\n../........-.../....................|....................-/.............../.....-...........-....\\......||....\r\n.....\\..|.....-|../....|./....-|.......-...../..-..\\..............\\...................../.................|...\r\n...-......../.\\...........\\.........\\../.....|............\\..................../.........\\................/.\\/\r\n...../...|............-..\\.../............/............-..............--.-..........././............-........|\r\n.....|...........\\.....-...\\..../.....-........-.....\\.|..............\\....-............./...../..............\r\n....\\.....-.|....\\..../..............\\|../.........../......|....\\/.......................|............|....-.\r\n........|..--..............|..............-........|.......|.-.........\\.............-...........\\............\r\n./.||....\\......./....\\./........../...........././....\\.................../..................\\...../.........\r\n.......|..\\...-.\\..\\..|.........../..................................-....|........\\......|....|..............\r\n...|..........|.........-...............|...............................-.......|...........-..\\.......\\......\r\n.\\.........../../............................-..|...\\.....-.........../......-|.../.....|.................-...\r\n........|....../..\\..\\|..|......|.........|...............................\\../.....\\....-/........-...........\r\n.................................................\\.......|........|.\\.-....../.......|.......|............\\...\r\n.......|.......\\.......|.........|......-......|...|...\\.............\\.............|/.........................\r\n..........|....................|..........\\..........-......./................................................\r\n...../.......|....................|......................././.................................................\r\n........\\.............|........--..........\\.............../......|...................../............|..\\.....\r\n....-............|.........|....|.-.\\../-...\\....-...-................\\|..\\-.......|........-............../..\r\n................/........\\.....\\.....././....|....................-...............\\...........-......\\........\r\n.\\.....|......|...|\\......\\.\\/....\\.............-............\\.....\\.......-...-........-....//..../.....|..-.\r\n..................|..|.-.................../\\...........|..../..........\\|.....-..|.../.......................\r\n-......-......./........./../.............../..................-..\\.......\\............|...../../....../......\r\n....../............/...........\\.............\\............./.........../.......\\......|....|.........../......\r\n...\\........|..................|............-............-.....-..\\..-................/........../........||..\r\n......../..|..-../..../......................../.........\\./.-................../...................-.........\r\n.../....|....\\.......-..\\..........-....\\.............|\\........../...............-........|..................\r\n..............\\.............\\|.........-......................-........\\|......./.......-.................|...\r\n/..../...-||\\-...|\\...............................\\.......................\\.............-................-....\r\n.......-..-....|..................|..............................................................///...-.../.|\r\n......|.......-/........-.-......|....\\..-...|...........\\...........\\.....................-..../.........../.\r\n......-...........|-..\\.......|...|.\\|.................-....\\...................\\.\\........\\.\\./.........\\....\r\n....../............../.........|...|.......|..../.............................................................\r\n.........../...................-./...\\..........\\-............./...........\\.../.....|......................-.\r\n/..../..../........................................|.\\......-/......./....\\.........................-......|..\r\n.\\./.|.-..........................|...|...........|....../....-....../|...............\\..............\\...-....\r\n....|...\\..........|......-..................|........../..|.-...\\........./........|................|........\r\n...\\....\\........../........../.........\\..............-...........................-.|...../..........\\.......\r\n...|...........-...........................\\........-.........................\\...-..-.....\\.......|........-.\r\n......\\|...........................\\.....................................-............/....\\...........|......\r\n................../............-........................\\.................................................-...\r\n.../....|...............|....................../\\.........|....................\\....|............\\.........|-.\r\n.......................................|....-.........../....\\-........|......./............-..|.............\\\r\n/.........\\..\\.........|...............\\.......\\........./................\\....................|.....|........\r\n..................................|.....|.-..|.../......................../-\\......|..........................\r\n.................|.....................................................-............|.....|..../.\\/..........|\r\n.......\\....\\....-........|.|..../......-......\\...../....................-...........\\............-..........\r\n....-.................................-..........-......-................................../.........-\\...|...\r\n.....................|......................|.........-............../.../.....-........\\.....................\r\n.\\./..........-.\\...\\||................./../........\\.........|...\\........\\....\\.\\...............-|......|...\r\n..\\......//.........../.\\........\\......|......|........\\......\\.....-..........|.-..|...../|.................\r\n/.....................\\.................-........|...................\\.....-..............-/.....\\..|../../...\r\n...|..-.../............./.|.................../............/..\\...........-....|-............\\.......--.......\r\n..............\\..\\/.....\\.........|.\\.........................|............|........./................./-..|-.\r\n...........................-.................../...................|\\..........\\/..|.-........................\r\n.....-.............................../....................\\.........|......................|..................\r\n..................\\.........../...........\\..\\/.........|...........|..-........|....\\..........-...../.|.....\r\n..........|.......\\..\\...........\\.../......................-...........-.....-........../\\|..................\r\n....../.......-........................\\|...//...\\..-......\\.......|..\\....................-..........\\..-....\r\n|./....|........-./........../.\\...\\.....|../..../.......-........../.\\.....-.................................";
        private static List<string> _lines = Utilities.StringToLines(Input);
        
        private static bool[,] _energised = new bool[_lines.Count , _lines[0].Length];
        private static List<Beam> _beams = new List<Beam>();
        private static List<char> _mirrors = new List<char> { '/', '\\' };
        private static List<char> _splitters = new List<char> { '-', '|' };

        private static Dictionary<char, (int, int)> _dirMap = new Dictionary<char, (int, int)>
        {
            { 'U', (-1, 0) },
            { 'R', (0, 1) },
            { 'D', (1, 0) },
            { 'L', (0, -1) }
        };

        internal static long Part1()
        {
            _beams.Add(new Beam((0, 0), 'R'));
            return CalculateEnergised();
        }        

        internal static long Part2()
        {
            long max = 0;
            // Go through columns
            for (int i = 0; i < _lines[0].Length; i++)
            {
                _beams = new List<Beam> { new Beam((0, i), 'D') };
                _energised = new bool[_lines.Count, _lines[0].Length];
                var num = CalculateEnergised();
                if (num > max) max = num;

                _beams = new List<Beam> { new Beam((_lines.Count - 1, i), 'U') };
                _energised = new bool[_lines.Count, _lines[0].Length];
                num = CalculateEnergised();
                if (num > max) max = num;
            }

            // Go through rows
            for (int j = 0; j < _lines.Count; j++)
            {
                _beams = new List<Beam> { new Beam((j, 0), 'R') };
                _energised = new bool[_lines.Count, _lines[0].Length];
                var num = CalculateEnergised();
                if (num > max) max = num;

                _beams = new List<Beam> { new Beam((j, _lines[0].Length - 1), 'L') };
                _energised = new bool[_lines.Count, _lines[0].Length];
                num = CalculateEnergised();
                if (num > max) max = num;
            }
            return max;
        }

        private static long CalculateEnergised()
        {
            var start = _beams[0].Coords;
            _energised[start.r, start.c] = true;
            while (_beams.Count > 0)
            {
                MoveBeam(_beams[0]);
            }

            var sum = 0;
            for (int r = 0; r < _energised.GetLength(0); r++)
            {
                for (int c = 0; c < _energised.GetLength(1); c++)
                {
                    if (_energised[r, c]) sum++;
                }
            }
            return sum;
        }

        private static void CalculateMirror(Beam beam, char mirrorType)
        {
            char newDir = 'X';
            if (mirrorType == '/')
            {
                if (beam.Dir == 'L') newDir = 'D';
                else if (beam.Dir == 'D') newDir = 'L';
                else if (beam.Dir == 'U') newDir = 'R';
                else if (beam.Dir == 'R') newDir = 'U';
            }
            else if (mirrorType == '\\')
            {
                if (beam.Dir == 'L') newDir = 'U';
                else if (beam.Dir == 'D') newDir = 'R';
                else if (beam.Dir == 'U') newDir = 'L';
                else if (beam.Dir == 'R') newDir = 'D';
            }
            if (newDir == 'X') throw new Exception($"Invalid beam direction {beam.Dir}");
            _beams.Add(new Beam(beam.Coords, newDir));
            _beams.Remove(beam);
        }

        private static void CalculateSplitter(Beam beam, char splitterType)
        {
            if (splitterType == '-')
            {
                if (beam.Dir == 'L' || beam.Dir == 'R') return;
                if (_energised[beam.Coords.r, beam.Coords.c])
                {
                    _beams.Remove(beam);
                    return;
                }
                _beams.Add(new Beam(beam.Coords, 'L'));
                _beams.Add(new Beam(beam.Coords, 'R'));
                _beams.Remove(beam);
            }
            else if (splitterType == '|')
            {
                if (beam.Dir == 'U' || beam.Dir == 'D') return;
                if (_energised[beam.Coords.r, beam.Coords.c])
                {
                    _beams.Remove(beam);
                    return;
                }
                _beams.Add(new Beam(beam.Coords, 'U'));
                _beams.Add(new Beam(beam.Coords, 'D'));
                _beams.Remove(beam);
            }
        }

        private static void MoveBeam(Beam beam)
        {
            // Move the beam until it hits something
            while (true)
            {
                var nextPos = Utilities.SumCoords(beam.Coords, _dirMap[beam.Dir]);

                // If it goes out of bounds then delete
                if (nextPos.Item1 < 0 || nextPos.Item1 > _lines.Count - 1
                    || nextPos.Item2 < 0 || nextPos.Item2 > _lines[0].Length - 1)
                {
                    _beams.Remove(beam);
                    break;
                }

                // Move and next pos as energised
                beam.Coords = nextPos;
                
                if (_mirrors.Contains(_lines[beam.Coords.r][beam.Coords.c]))
                {
                    CalculateMirror(beam, _lines[beam.Coords.r][beam.Coords.c]);
                    _energised[beam.Coords.r, beam.Coords.c] = true;
                    break;
                }
                else if (_splitters.Contains(_lines[beam.Coords.r][beam.Coords.c]))
                {
                    CalculateSplitter(beam, _lines[beam.Coords.r][beam.Coords.c]);
                    _energised[beam.Coords.r, beam.Coords.c] = true;
                    break;
                }
                _energised[beam.Coords.r, beam.Coords.c] = true;
            }
        }

        private class Beam
        {
            public (int r, int c) Coords;
            public char Dir;
            public Beam((int, int) coords, char dir)
            {
                Dir = dir;
                Coords = coords;
            }
        }

    }
}
